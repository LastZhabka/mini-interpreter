{
    "test_1": {
        "in": "(puts (uppercase \"abc\"))\n(puts \"hello world\")\n(puts (concat \"ab\" \"c\"))\n(puts (lowercase \"ABC\"))\n(puts (replace \"abcdef\" \"abc\" \"123\"))\n(puts (replace \"abc\" \"xyz\" \"123\"))\n(puts (substring \"abcdef\" 0 3))\n(puts (uppercase \"abc\"))",
        "interpreter_out": "ABC\nhello world\nabc\nabc\n123def\nabc\nabc\nABC\n",
        "lexer_out": "DelimiterToken(() KeywordToken(puts) SpaceToken() DelimiterToken(() KeywordToken(uppercase) SpaceToken() StringLitToken(abc) DelimiterToken()) DelimiterToken()) SpaceToken() DelimiterToken(() KeywordToken(puts) SpaceToken() StringLitToken(hello world) DelimiterToken()) SpaceToken() DelimiterToken(() KeywordToken(puts) SpaceToken() DelimiterToken(() KeywordToken(concat) SpaceToken() StringLitToken(ab) SpaceToken() StringLitToken(c) DelimiterToken()) DelimiterToken()) SpaceToken() DelimiterToken(() KeywordToken(puts) SpaceToken() DelimiterToken(() KeywordToken(lowercase) SpaceToken() StringLitToken(ABC) DelimiterToken()) DelimiterToken()) SpaceToken() DelimiterToken(() KeywordToken(puts) SpaceToken() DelimiterToken(() KeywordToken(replace) SpaceToken() StringLitToken(abcdef) SpaceToken() StringLitToken(abc) SpaceToken() StringLitToken(123) DelimiterToken()) DelimiterToken()) SpaceToken() DelimiterToken(() KeywordToken(puts) SpaceToken() DelimiterToken(() KeywordToken(replace) SpaceToken() StringLitToken(abc) SpaceToken() StringLitToken(xyz) SpaceToken() StringLitToken(123) DelimiterToken()) DelimiterToken()) SpaceToken() DelimiterToken(() KeywordToken(puts) SpaceToken() DelimiterToken(() KeywordToken(substring) SpaceToken() StringLitToken(abcdef) SpaceToken() IntLitToken(0) SpaceToken() IntLitToken(3) DelimiterToken()) DelimiterToken()) SpaceToken() DelimiterToken(() KeywordToken(puts) SpaceToken() DelimiterToken(() KeywordToken(uppercase) SpaceToken() StringLitToken(abc) DelimiterToken()) DelimiterToken()) EOFToken() "
    },
    "test_2": {
        "in": "(set v 3.50121)\n(set a 2.0)\n(puts (concat \"Score : \" (str (add v a))))\n(puts (str (max a v 3.51)))",
        "interpreter_out": "Score : 5.5012\n3.5100\n",
        "lexer_out": "DelimiterToken(() KeywordToken(set) SpaceToken() IdentifierToken(v) SpaceToken() FloatLitToken(3.501210) DelimiterToken()) SpaceToken() DelimiterToken(() KeywordToken(set) SpaceToken() IdentifierToken(a) SpaceToken() FloatLitToken(2.000000) DelimiterToken()) SpaceToken() DelimiterToken(() KeywordToken(puts) SpaceToken() DelimiterToken(() KeywordToken(concat) SpaceToken() StringLitToken(Score : ) SpaceToken() DelimiterToken(() KeywordToken(str) SpaceToken() DelimiterToken(() KeywordToken(add) SpaceToken() IdentifierToken(v) SpaceToken() IdentifierToken(a) DelimiterToken()) DelimiterToken()) DelimiterToken()) DelimiterToken()) SpaceToken() DelimiterToken(() KeywordToken(puts) SpaceToken() DelimiterToken(() KeywordToken(str) SpaceToken() DelimiterToken(() KeywordToken(max) SpaceToken() IdentifierToken(a) SpaceToken() IdentifierToken(v) SpaceToken() FloatLitToken(3.510000) DelimiterToken()) DelimiterToken()) DelimiterToken()) EOFToken() "
    },
    "test_3": {
        "in": "(puts (str (add 1 2)))\n(puts (str (add 1 2 3 4 5)))\n(puts (str (subtract 10 2)))\n(puts (str (subtract 1 2)))\n(puts (str (multiply 2 3)))\n(puts (str (multiply 2.0 3)))\n(puts (str (multiply 2 2.5)))\n(puts (str (multiply 1 2 3 4 5)))\n(puts (str (divide 6 2)))\n(puts (str (divide 1 2)))\n(puts (str (abs -1)))\n(puts (str (abs 1)))\n(puts (str (max 1 -2)))\n(puts (str (max 1 2 3 4 5)))\n(puts (str (min 1 2)))\n(puts (str (min 5 4 3 2 1)))\n(puts (str (gt 1 2)))\n(puts (str (gt 2 1)))\n(puts (str (lt 1 2)))\n(puts (str (lt 2 1)))\n(puts (str (add 10.0 10)))\n(puts (str (divide 10 3.0)))\n(puts (str (divide 10 4.0)))",
        "interpreter_out": "3\n15\n8\n-1\n6\n6.0000\n5.0000\n120\n3\n0\n1\n1\n1\n5\n1\n1\nfalse\ntrue\ntrue\nfalse\n20.0000\n3.3333\n2.5000\n",
        "lexer_out": "DelimiterToken(() KeywordToken(puts) SpaceToken() DelimiterToken(() KeywordToken(str) SpaceToken() DelimiterToken(() KeywordToken(add) SpaceToken() IntLitToken(1) SpaceToken() IntLitToken(2) DelimiterToken()) DelimiterToken()) DelimiterToken()) SpaceToken() DelimiterToken(() KeywordToken(puts) SpaceToken() DelimiterToken(() KeywordToken(str) SpaceToken() DelimiterToken(() KeywordToken(add) SpaceToken() IntLitToken(1) SpaceToken() IntLitToken(2) SpaceToken() IntLitToken(3) SpaceToken() IntLitToken(4) SpaceToken() IntLitToken(5) DelimiterToken()) DelimiterToken()) DelimiterToken()) SpaceToken() DelimiterToken(() KeywordToken(puts) SpaceToken() DelimiterToken(() KeywordToken(str) SpaceToken() DelimiterToken(() KeywordToken(subtract) SpaceToken() IntLitToken(10) SpaceToken() IntLitToken(2) DelimiterToken()) DelimiterToken()) DelimiterToken()) SpaceToken() DelimiterToken(() KeywordToken(puts) SpaceToken() DelimiterToken(() KeywordToken(str) SpaceToken() DelimiterToken(() KeywordToken(subtract) SpaceToken() IntLitToken(1) SpaceToken() IntLitToken(2) DelimiterToken()) DelimiterToken()) DelimiterToken()) SpaceToken() DelimiterToken(() KeywordToken(puts) SpaceToken() DelimiterToken(() KeywordToken(str) SpaceToken() DelimiterToken(() KeywordToken(multiply) SpaceToken() IntLitToken(2) SpaceToken() IntLitToken(3) DelimiterToken()) DelimiterToken()) DelimiterToken()) SpaceToken() DelimiterToken(() KeywordToken(puts) SpaceToken() DelimiterToken(() KeywordToken(str) SpaceToken() DelimiterToken(() KeywordToken(multiply) SpaceToken() FloatLitToken(2.000000) SpaceToken() IntLitToken(3) DelimiterToken()) DelimiterToken()) DelimiterToken()) SpaceToken() DelimiterToken(() KeywordToken(puts) SpaceToken() DelimiterToken(() KeywordToken(str) SpaceToken() DelimiterToken(() KeywordToken(multiply) SpaceToken() IntLitToken(2) SpaceToken() FloatLitToken(2.500000) DelimiterToken()) DelimiterToken()) DelimiterToken()) SpaceToken() DelimiterToken(() KeywordToken(puts) SpaceToken() DelimiterToken(() KeywordToken(str) SpaceToken() DelimiterToken(() KeywordToken(multiply) SpaceToken() IntLitToken(1) SpaceToken() IntLitToken(2) SpaceToken() IntLitToken(3) SpaceToken() IntLitToken(4) SpaceToken() IntLitToken(5) DelimiterToken()) DelimiterToken()) DelimiterToken()) SpaceToken() DelimiterToken(() KeywordToken(puts) SpaceToken() DelimiterToken(() KeywordToken(str) SpaceToken() DelimiterToken(() KeywordToken(divide) SpaceToken() IntLitToken(6) SpaceToken() IntLitToken(2) DelimiterToken()) DelimiterToken()) DelimiterToken()) SpaceToken() DelimiterToken(() KeywordToken(puts) SpaceToken() DelimiterToken(() KeywordToken(str) SpaceToken() DelimiterToken(() KeywordToken(divide) SpaceToken() IntLitToken(1) SpaceToken() IntLitToken(2) DelimiterToken()) DelimiterToken()) DelimiterToken()) SpaceToken() DelimiterToken(() KeywordToken(puts) SpaceToken() DelimiterToken(() KeywordToken(str) SpaceToken() DelimiterToken(() KeywordToken(abs) SpaceToken() IntLitToken(-1) DelimiterToken()) DelimiterToken()) DelimiterToken()) SpaceToken() DelimiterToken(() KeywordToken(puts) SpaceToken() DelimiterToken(() KeywordToken(str) SpaceToken() DelimiterToken(() KeywordToken(abs) SpaceToken() IntLitToken(1) DelimiterToken()) DelimiterToken()) DelimiterToken()) SpaceToken() DelimiterToken(() KeywordToken(puts) SpaceToken() DelimiterToken(() KeywordToken(str) SpaceToken() DelimiterToken(() KeywordToken(max) SpaceToken() IntLitToken(1) SpaceToken() IntLitToken(-2) DelimiterToken()) DelimiterToken()) DelimiterToken()) SpaceToken() DelimiterToken(() KeywordToken(puts) SpaceToken() DelimiterToken(() KeywordToken(str) SpaceToken() DelimiterToken(() KeywordToken(max) SpaceToken() IntLitToken(1) SpaceToken() IntLitToken(2) SpaceToken() IntLitToken(3) SpaceToken() IntLitToken(4) SpaceToken() IntLitToken(5) DelimiterToken()) DelimiterToken()) DelimiterToken()) SpaceToken() DelimiterToken(() KeywordToken(puts) SpaceToken() DelimiterToken(() KeywordToken(str) SpaceToken() DelimiterToken(() KeywordToken(min) SpaceToken() IntLitToken(1) SpaceToken() IntLitToken(2) DelimiterToken()) DelimiterToken()) DelimiterToken()) SpaceToken() DelimiterToken(() KeywordToken(puts) SpaceToken() DelimiterToken(() KeywordToken(str) SpaceToken() DelimiterToken(() KeywordToken(min) SpaceToken() IntLitToken(5) SpaceToken() IntLitToken(4) SpaceToken() IntLitToken(3) SpaceToken() IntLitToken(2) SpaceToken() IntLitToken(1) DelimiterToken()) DelimiterToken()) DelimiterToken()) SpaceToken() DelimiterToken(() KeywordToken(puts) SpaceToken() DelimiterToken(() KeywordToken(str) SpaceToken() DelimiterToken(() KeywordToken(gt) SpaceToken() IntLitToken(1) SpaceToken() IntLitToken(2) DelimiterToken()) DelimiterToken()) DelimiterToken()) SpaceToken() DelimiterToken(() KeywordToken(puts) SpaceToken() DelimiterToken(() KeywordToken(str) SpaceToken() DelimiterToken(() KeywordToken(gt) SpaceToken() IntLitToken(2) SpaceToken() IntLitToken(1) DelimiterToken()) DelimiterToken()) DelimiterToken()) SpaceToken() DelimiterToken(() KeywordToken(puts) SpaceToken() DelimiterToken(() KeywordToken(str) SpaceToken() DelimiterToken(() KeywordToken(lt) SpaceToken() IntLitToken(1) SpaceToken() IntLitToken(2) DelimiterToken()) DelimiterToken()) DelimiterToken()) SpaceToken() DelimiterToken(() KeywordToken(puts) SpaceToken() DelimiterToken(() KeywordToken(str) SpaceToken() DelimiterToken(() KeywordToken(lt) SpaceToken() IntLitToken(2) SpaceToken() IntLitToken(1) DelimiterToken()) DelimiterToken()) DelimiterToken()) SpaceToken() DelimiterToken(() KeywordToken(puts) SpaceToken() DelimiterToken(() KeywordToken(str) SpaceToken() DelimiterToken(() KeywordToken(add) SpaceToken() FloatLitToken(10.000000) SpaceToken() IntLitToken(10) DelimiterToken()) DelimiterToken()) DelimiterToken()) SpaceToken() DelimiterToken(() KeywordToken(puts) SpaceToken() DelimiterToken(() KeywordToken(str) SpaceToken() DelimiterToken(() KeywordToken(divide) SpaceToken() IntLitToken(10) SpaceToken() FloatLitToken(3.000000) DelimiterToken()) DelimiterToken()) DelimiterToken()) SpaceToken() DelimiterToken(() KeywordToken(puts) SpaceToken() DelimiterToken(() KeywordToken(str) SpaceToken() DelimiterToken(() KeywordToken(divide) SpaceToken() IntLitToken(10) SpaceToken() FloatLitToken(4.000000) DelimiterToken()) DelimiterToken()) DelimiterToken()) EOFToken() "
    },
    "test_4": {
        "in": "(set v \"Hello World\")\n(puts (concat v \", Student\"))",
        "interpreter_out": "Hello World, Student\n",
        "lexer_out": "DelimiterToken(() KeywordToken(set) SpaceToken() IdentifierToken(v) SpaceToken() StringLitToken(Hello World) DelimiterToken()) SpaceToken() DelimiterToken(() KeywordToken(puts) SpaceToken() DelimiterToken(() KeywordToken(concat) SpaceToken() IdentifierToken(v) SpaceToken() StringLitToken(, Student) DelimiterToken()) DelimiterToken()) EOFToken() "
    },
    "test_5": {
        "in": "(puts (str (equal 2 2.0)))\n(puts (str (equal 2 \"2\")))\n(puts (str (equal null null)))\n(puts (str (not_equal 2 2.0)))\n(puts (str (not_equal 2 \"2\")))\n(puts (str (not_equal null 5)))",
        "interpreter_out": "true\nfalse\ntrue\nfalse\ntrue\ntrue\n",
        "lexer_out": "DelimiterToken(() KeywordToken(puts) SpaceToken() DelimiterToken(() KeywordToken(str) SpaceToken() DelimiterToken(() KeywordToken(equal) SpaceToken() IntLitToken(2) SpaceToken() FloatLitToken(2.000000) DelimiterToken()) DelimiterToken()) DelimiterToken()) SpaceToken() DelimiterToken(() KeywordToken(puts) SpaceToken() DelimiterToken(() KeywordToken(str) SpaceToken() DelimiterToken(() KeywordToken(equal) SpaceToken() IntLitToken(2) SpaceToken() StringLitToken(2) DelimiterToken()) DelimiterToken()) DelimiterToken()) SpaceToken() DelimiterToken(() KeywordToken(puts) SpaceToken() DelimiterToken(() KeywordToken(str) SpaceToken() DelimiterToken(() KeywordToken(equal) SpaceToken() NullLitToken() SpaceToken() NullLitToken() DelimiterToken()) DelimiterToken()) DelimiterToken()) SpaceToken() DelimiterToken(() KeywordToken(puts) SpaceToken() DelimiterToken(() KeywordToken(str) SpaceToken() DelimiterToken(() KeywordToken(not_equal) SpaceToken() IntLitToken(2) SpaceToken() FloatLitToken(2.000000) DelimiterToken()) DelimiterToken()) DelimiterToken()) SpaceToken() DelimiterToken(() KeywordToken(puts) SpaceToken() DelimiterToken(() KeywordToken(str) SpaceToken() DelimiterToken(() KeywordToken(not_equal) SpaceToken() IntLitToken(2) SpaceToken() StringLitToken(2) DelimiterToken()) DelimiterToken()) DelimiterToken()) SpaceToken() DelimiterToken(() KeywordToken(puts) SpaceToken() DelimiterToken(() KeywordToken(str) SpaceToken() DelimiterToken(() KeywordToken(not_equal) SpaceToken() NullLitToken() SpaceToken() IntLitToken(5) DelimiterToken()) DelimiterToken()) DelimiterToken()) EOFToken() "
    },
    "test_6": {
        "in": "(puts (str 5))\n(puts (str null))",
        "interpreter_out": "5\nnull\n",
        "lexer_out": "DelimiterToken(() KeywordToken(puts) SpaceToken() DelimiterToken(() KeywordToken(str) SpaceToken() IntLitToken(5) DelimiterToken()) DelimiterToken()) SpaceToken() DelimiterToken(() KeywordToken(puts) SpaceToken() DelimiterToken(() KeywordToken(str) SpaceToken() NullLitToken() DelimiterToken()) DelimiterToken()) EOFToken() "
    },
    "test_7": {
        "in": "(puts \"Hello World\")\n(puts (str 5))\n(puts (concat \"ABC \" (str true)))",
        "interpreter_out": "Hello World\n5\nABC true\n",
        "lexer_out": "DelimiterToken(() KeywordToken(puts) SpaceToken() StringLitToken(Hello World) DelimiterToken()) SpaceToken() DelimiterToken(() KeywordToken(puts) SpaceToken() DelimiterToken(() KeywordToken(str) SpaceToken() IntLitToken(5) DelimiterToken()) DelimiterToken()) SpaceToken() DelimiterToken(() KeywordToken(puts) SpaceToken() DelimiterToken(() KeywordToken(concat) SpaceToken() StringLitToken(ABC ) SpaceToken() DelimiterToken(() KeywordToken(str) SpaceToken() BoolLitToken(true) DelimiterToken()) DelimiterToken()) DelimiterToken()) EOFToken() "
    }
}